#version 450

precision highp int;
precision mediump float;

layout(local_size_x = 1) in;

layout(set = 0, binding = 0) buffer PositionBuffer { vec2[] positions; };

layout(set = 0, binding = 1) buffer BinCountBuffer { uint[] bin_counts; };

layout(set = 0, binding = 2) uniform Uniforms {
    uint particle_count;
    float width;
    float height;
    float speed;
    float attraction_strength;
    float repulsion_strength;
    float attraction_range;
    float repulsion_range;
    float center_strength;
    float particle_radius;
    float collision_response;
    float momentum;
    float max_acceleration;
    float max_velocity;
    float bin_size;
    uint num_bins;
};

// Perform the initial bin count step of the radix sort algorithm.
// Counts the number of particles in each bin.
void main() {
    // read position
    uint index = gl_GlobalInvocationID.x;
    vec2 position = positions[index];

    // make position positive
    position += vec2(width, height) * 0.5;

    // get bin index
    vec2 bin = floor(position / bin_size);
    uint bin_index = uint(bin.y * ceil(width / bin_size)) + uint(bin.x);

    atomicAdd(bin_counts[bin_index], 1);
}
