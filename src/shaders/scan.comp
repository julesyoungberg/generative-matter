#version 450

precision highp int;
precision mediump float;

layout(local_size_x = 1) in;

layout(set = 0, binding = 0) buffer BinBuffer { uint[] bins; };
layout(set = 0, binding = 1) uniform Uniforms {
    uint particle_count;
    float width;
    float height;
    float speed;
    float attraction_strength;
    float repulsion_strength;
    float attraction_range;
    float repulsion_range;
    float center_strength;
    float particle_radius;
    float collision_response;
    float momentum;
    float max_acceleration;
    float max_velocity;
    uint num_bins_x;
    uint num_bins_y;
    float bin_size_x;
    float bin_size_y;
    uint num_bins;
};

// Perform the scan portion of the radix sort algorithm.
// A non-work efficient parallel scan from
// https://en.wikipedia.org/wiki/Prefix_sum
void main() {
    uint bin_index = gl_GlobalInvocationID.x;
    uint og_val = bins[bin_index];

    barrier();

    uint D = uint(log2(num_bins));
    for (uint d = 0; d < D; d++) {
        uint k = uint(pow(2, float(d)));
        uint val = bins[bin_index];
        uint other = 0;

        if (k <= bin_index) {
            other = bins[bin_index - k];
        }

        barrier();

        if (bin_index >= k) {
            bins[bin_index] = val + other;
        }

        barrier();
    }

    bins[bin_index] -= og_val;
}
